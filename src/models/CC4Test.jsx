/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 CC4Test.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, Html, useAnimations} from "@react-three/drei";
import { folder, button, useControls } from "leva";
import useVisemeAnimationCC4 from "../hooks/useVisemeAnimationCC4";
import useCharacterAnimation from "../hooks/useCharacterAnimation";
//import { useLipsync } from "../Reallusion/hooks/useLipSync";

export function CC4Test(props) {
  const {nodes, materials, scene } = useGLTF('models/CC4Test.glb')
  //const kevinRef = useRef();
  const group = useRef();
  const { client } = props;

  //log every part of every mesh for debug
  //Object.values(nodes).forEach(mesh => console.log(mesh.name));

  // These variables are required for the animation to function but may be made redundant in the future
    //const group = useRef();
    
    let setupMode = false;
    const [facialExpression, setFacialExpression] = useState("");


  // Possible facial expressions are set per model to accomodate for available visemes
  const facialExpressions = {
    default: {},
    test: {
      viseme_CH: 0.75,
      viseme_SS: 0.79,
      eyeSquintLeft: 1,
      eyeSquintRight: 1,
      eyeWideRight: 1
    },
  };


  // Map viseme symbols to corresponding morph target names as these may differ per model
  const visemeMap = {
    // Silence
    "-": ["Silence"],

    "a": [
      "Mouth_Drop_Lower", 
      "Mouth_Frown_L", 
      "Mouth_Frown_R", 
      "V_Tongue_Out", 
      "TongueRotation", 
      "Open_Jaw",
    ],

    "o": [
      "Mouth_Shrug_Upper",
      "Mouth_Drop_Lower",
      "Mouth_Down",
      "Mouth_Pull_Lower_L",
      "Mouth_Pull_Lower_R",
      "Mouth_Pull_Upper_L",
      "Mouth_Pull_Upper_R",
      "Mouth_Smile_L",
      "Mouth_Smile_R",
      "Open_Jaw",
    ],

    "e": [
      "Mouth_Shrug_Upper", 
      "Mouth_Drop_Lower", 
      "Mouth_Down", 
      "Mouth_Pull_Lower_L", 
      "Mouth_Pull_Lower_R", 
      "Mouth_Pull_Upper_L", 
      "Mouth_Pull_Upper_R", 
      "Mouth_Smile_L", 
      "Mouth_Smile_R", 
      "Open_Jaw",
    ],

    "i": [
      "Mouth_Shrug_Upper", 
      "Mouth_Drop_Lower", 
      "Mouth_Down",
      "Open_Jaw", 
      "Mouth_Frown_L", 
      "Mouth_Frown_R", 
      "Mouth_Pull_Upper_L",
      "Mouth_Pull_Upper_R",
      "Mouth_Pull_Lower_L",
      "Mouth_Pull_Lower_R",
      "V_Lip_Open",
      "TongueRotation", 
      "TongueUp", 
      "V_Tongue_Out", 
    ],

    "u": [
      "Mouth_Shrug_Lower",
      "Mouth_Drop_Upper",
      "Mouth_Down",
      "V_Tight_O",
      "Open_Jaw",
    ],

    "r": [
      "Mouth_Drop_Upper",
      "Mouth_Drop_Lower",
      "Mouth_Down",
      "Mouth_Blow_L",
      "Mouth_Blow_R",
      "Mouth_Pull_Lower_L",
      "Mouth_Pull_Lower_R",
      "Mouth_Roll_Out_Lower_L",
      "Mouth_Roll_Out_Lower_R",
      "V_Affricate",
      "V_Lip_Open",
      "Open_Jaw",
      "TongueUp",
      "TongueRotation",
    ],

    "s": [
      "V_Open",
      "Mouth_Drop_Lower",
      "Mouth_Smile_L",
      "Mouth_Smile_R",
      "Mouth_Roll_In_Upper_L",
      "Mouth_Roll_In_Upper_R",
      "V_Wide",
      "Open_Jaw",
    ],

    "n": [
      "Mouth_Drop_Lower",
      "Mouth_Down",
      "Mouth_Pull_Lower_L",
      "Mouth_Pull_Lower_R",
      "Mouth_Roll_Out_Lower_L",
      "Mouth_Roll_Out_Lower_R",
      "V_Affricate",
      "Open_Jaw",
      "TongueRotation",
      "TongueUp",
    ],

    "th": [
      "Mouth_Drop_Lower",
      "Mouth_Shrug_Upper",
      "Mouth_Stretch_L",
      "Mouth_Stretch_R",
      "V_Lip_Open",
      "Open_Jaw",
      "TongueUp",
      "TongueRotation"

    ],

    "f": [
      "V_Dental_Lip",
      "Mouth_Funnel_Down_L",
      "Mouth_Funnel_Down_R",
      "Mouth_Drop_Upper",
    ],

    "d": [
      "Mouth_Shrug_Upper",
      "Mouth_Stretch_L",
      "Mouth_Stretch_R",
      "Mouth_Roll_Out_Lower_L",
      "Mouth_Roll_Out_Lower_R",
      "V_Lip_Open",
      "Open_Jaw",
      "TongueRotation",
      "TongueUp",
    ],

    "k": [
      "Mouth_Drop_Lower",
      "Mouth_Shrug_Upper",
      "Open_Jaw",
      "V_Wide",
    ],

    "p": [
      "V_Explosive",
      "Mouth_Roll_In_Upper_L",
      "Mouth_Roll_In_Upper_R",
      "Mouth_Roll_In_Lower_L",
      "Mouth_Roll_In_Lower_R",
      "Open_Jaw",
    ],

    "ch": [
      "Mouth_Drop_Lower",
      "Mouth_Down",
      "Mouth_Roll_Out_Lower_L",
      "Mouth_Roll_Out_Lower_R",
      "V_Affricate",
      "Open_Jaw",
      "TongueRotation",
      "TongueUp",
    ],

  };

  /*
    
    "sh": ["V_Open"],
    "l": ["V_Open"],
    "oh": ["V_Open"],
    "ow": ["V_Open"],
    "oy": ["V_Open"],
    "ai": ["V_Open"],
    "h": ["V_Open"],
    "er": ["V_Open"],
    "ar": ["V_Open"],

    */

  // Get useVisemeAnimation from the imported hook
  const { lerpInfluence } = useVisemeAnimationCC4(group, setFacialExpression, visemeMap, setupMode, nodes, group);

  // Get useCharacterAnimation from the imported hook
  const { animation, animations, setAnimation, lerpMorphTarget, setWinkLeft, setWinkRight } = useCharacterAnimation(
    "/models/testanimations.glb",
    group,
    scene,
    nodes, 
    facialExpressions, 
    facialExpression,
    setupMode
  );
  
  /*

  //Leva Controls for debugging
      useControls("FacialExpressions", {
        winkLeft: button(() => {
          setWinkLeft(true);
          setTimeout(() => setWinkLeft(false), 300);
        }),
        winkRight: button(() => {
          setWinkRight(true);
          setTimeout(() => setWinkRight(false), 300);
        }),
        animation: {
          value: animation,
          options: animations.map((a) => a.name),
          onChange: (value) => setAnimation(value),
        },
        facialExpression: {
          options: Object.keys(facialExpressions),
          onChange: (value) => {if (setupMode) 
            {setFacialExpression(value)}},
        },
        enableSetupMode: button(() => {
          setupMode = true;
        }),
        disableSetupMode: button(() => {
          setupMode = false;
        }),
        logMorphTargetValues: button(() => {
          const emotionValues = {};
          Object.keys(nodes.CC_Base_Body002.morphTargetDictionary).forEach((key) => {
            if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
              return; // eyes wink/blink are handled separately
            }
            const value =
              nodes.CC_Base_Body002.morphTargetInfluences[
                nodes.CC_Base_Body002.morphTargetDictionary[key]
              ];
            if (value > 0.01) {
              emotionValues[key] = value;
            }
            console.log(nodes.CC_Base_Body002.morphTargetDictionary);
          });
          console.log(JSON.stringify(emotionValues, null, 2));
        }),
      });
    */

      const morphTargets = Object.keys(nodes).reduce((acc, nodeName) => {
        const node = nodes[nodeName];
      
        if (node.morphTargetDictionary && node.morphTargetInfluences) {
          Object.keys(node.morphTargetDictionary).forEach((key) => {
            // Use only the morph target name (without node name)
            if (!acc[key]) {
              acc[key] = {
                label: key,
                value: 0, // Default to 0
                min: 0,
                max: 1,
                onChange: (val) => {
                  // Apply the value to ALL meshes that have this morph target
                  Object.keys(nodes).forEach((meshName) => {
                    const mesh = nodes[meshName];
                    if (mesh.morphTargetDictionary && mesh.morphTargetDictionary[key] !== undefined) {
                      lerpInfluence(mesh, key, val, 0.1);
                    }
                  });
                },
              };
            }
          });
        }
      
        return acc;
      }, {});
      
      const [, set] = useControls("MorphTarget", () => morphTargets);

      /*
      const [facialData, setFacialData] = useState([
        {
          Open_Jaw: 0.3,
          Eye_Blink_L: 0.0,
          Eye_Blink_R: 0.0,
          Mouth_Smile: 0.5,
          TongueRotation: 0.1,
          TongueUp: 0.2,
          V_Tongue_Out: 0.0
        },
        {
          Open_Jaw: 0.5,
          Eye_Blink_L: 0.1,
          Eye_Blink_R: 0.0,
          Mouth_Smile: 0.3,
          TongueRotation: 0.2,
          TongueUp: 0.1,
          V_Tongue_Out: 0.1
        },
        {
          Open_Jaw: 0.2,
          Eye_Blink_L: 0.0,
          Eye_Blink_R: 0.1,
          Mouth_Smile: 0.4,
          TongueRotation: 0.3,
          TongueUp: 0.3,
          V_Tongue_Out: 0.2
        }
      ]);
      
      useLipsync({facialData, characterRef: kevinRef, nodes, scene});
      */


      return (
        <group {...props} dispose={null} ref={group}>
          <group name="Scene">
            <group name="CC4Kevin">
              <primitive object={nodes.CC_Base_BoneRoot} />
              <skinnedMesh name="Layered_sweater" geometry={nodes.Layered_sweater.geometry} material={materials['Layered_sweater.001_B128']} skeleton={nodes.Layered_sweater.skeleton} />
              <skinnedMesh name="Slim_Jeans" geometry={nodes.Slim_Jeans.geometry} material={materials['Slim_Jeans.001_B113']} skeleton={nodes.Slim_Jeans.skeleton} />
              <skinnedMesh name="Sport_sneakers" geometry={nodes.Sport_sneakers.geometry} material={materials['Sport_sneakers.001_B105']} skeleton={nodes.Sport_sneakers.skeleton} />
              <group name="CC_Base_Body">
                <skinnedMesh name="CC_Base_Body002" geometry={nodes.CC_Base_Body002.geometry} material={materials['Std_Skin_Head.001_B116']} skeleton={nodes.CC_Base_Body002.skeleton} morphTargetDictionary={nodes.CC_Base_Body002.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body002.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Body002_1" geometry={nodes.CC_Base_Body002_1.geometry} material={materials['Std_Skin_Body.001_B117']} skeleton={nodes.CC_Base_Body002_1.skeleton} morphTargetDictionary={nodes.CC_Base_Body002_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body002_1.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Body002_2" geometry={nodes.CC_Base_Body002_2.geometry} material={materials['Std_Skin_Arm.001_B118']} skeleton={nodes.CC_Base_Body002_2.skeleton} morphTargetDictionary={nodes.CC_Base_Body002_2.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body002_2.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Body002_3" geometry={nodes.CC_Base_Body002_3.geometry} material={materials['Std_Skin_Leg.001_B119']} skeleton={nodes.CC_Base_Body002_3.skeleton} morphTargetDictionary={nodes.CC_Base_Body002_3.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body002_3.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Body002_4" geometry={nodes.CC_Base_Body002_4.geometry} material={materials['Std_Nails.001_B120']} skeleton={nodes.CC_Base_Body002_4.skeleton} morphTargetDictionary={nodes.CC_Base_Body002_4.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body002_4.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Body002_5" geometry={nodes.CC_Base_Body002_5.geometry} material={materials['Std_Eyelash.001_B121']} skeleton={nodes.CC_Base_Body002_5.skeleton} morphTargetDictionary={nodes.CC_Base_Body002_5.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body002_5.morphTargetInfluences} />
              </group>
              <group name="CC_Base_Eye">
                <skinnedMesh name="CC_Base_Eye001" geometry={nodes.CC_Base_Eye001.geometry} material={materials['Std_Eye_R.001_B122']} skeleton={nodes.CC_Base_Eye001.skeleton} morphTargetDictionary={nodes.CC_Base_Eye001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Eye001.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Eye001_1" geometry={nodes.CC_Base_Eye001_1.geometry} material={materials['Std_Cornea_R.001_B123']} skeleton={nodes.CC_Base_Eye001_1.skeleton} morphTargetDictionary={nodes.CC_Base_Eye001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Eye001_1.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Eye001_2" geometry={nodes.CC_Base_Eye001_2.geometry} material={materials['Std_Eye_L.001_B124']} skeleton={nodes.CC_Base_Eye001_2.skeleton} morphTargetDictionary={nodes.CC_Base_Eye001_2.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Eye001_2.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Eye001_3" geometry={nodes.CC_Base_Eye001_3.geometry} material={materials['Std_Cornea_L.001_B125']} skeleton={nodes.CC_Base_Eye001_3.skeleton} morphTargetDictionary={nodes.CC_Base_Eye001_3.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Eye001_3.morphTargetInfluences} />
              </group>
              <group name="CC_Base_EyeOcclusion">
                <skinnedMesh name="CC_Base_EyeOcclusion001" geometry={nodes.CC_Base_EyeOcclusion001.geometry} material={materials['Std_Eye_Occlusion_R.001_B126']} skeleton={nodes.CC_Base_EyeOcclusion001.skeleton} morphTargetDictionary={nodes.CC_Base_EyeOcclusion001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_EyeOcclusion001.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_EyeOcclusion001_1" geometry={nodes.CC_Base_EyeOcclusion001_1.geometry} material={materials['Std_Eye_Occlusion_L.001_B127']} skeleton={nodes.CC_Base_EyeOcclusion001_1.skeleton} morphTargetDictionary={nodes.CC_Base_EyeOcclusion001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_EyeOcclusion001_1.morphTargetInfluences} />
              </group>
              <group name="CC_Base_TearLine">
                <skinnedMesh name="CC_Base_TearLine001" geometry={nodes.CC_Base_TearLine001.geometry} material={materials['Std_Tearline_R.001_B106']} skeleton={nodes.CC_Base_TearLine001.skeleton} morphTargetDictionary={nodes.CC_Base_TearLine001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_TearLine001.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_TearLine001_1" geometry={nodes.CC_Base_TearLine001_1.geometry} material={materials['Std_Tearline_L.001_B107']} skeleton={nodes.CC_Base_TearLine001_1.skeleton} morphTargetDictionary={nodes.CC_Base_TearLine001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_TearLine001_1.morphTargetInfluences} />
              </group>
              <group name="CC_Base_Teeth">
                <skinnedMesh name="CC_Base_Teeth001" geometry={nodes.CC_Base_Teeth001.geometry} material={materials['Std_Upper_Teeth.001_B103']} skeleton={nodes.CC_Base_Teeth001.skeleton} morphTargetDictionary={nodes.CC_Base_Teeth001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Teeth001.morphTargetInfluences} />
                <skinnedMesh name="CC_Base_Teeth001_1" geometry={nodes.CC_Base_Teeth001_1.geometry} material={materials['Std_Lower_Teeth.001_B104']} skeleton={nodes.CC_Base_Teeth001_1.skeleton} morphTargetDictionary={nodes.CC_Base_Teeth001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Teeth001_1.morphTargetInfluences} />
              </group>
              <skinnedMesh name="CC_Base_Tongue" geometry={nodes.CC_Base_Tongue.geometry} material={materials['Std_Tongue.001_B112']} skeleton={nodes.CC_Base_Tongue.skeleton} morphTargetDictionary={nodes.CC_Base_Tongue.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Tongue.morphTargetInfluences} />
              <skinnedMesh name="Circle_Sparse" geometry={nodes.Circle_Sparse.geometry} material={materials['Beard_Transparency.005_B108']} skeleton={nodes.Circle_Sparse.skeleton} morphTargetDictionary={nodes.Circle_Sparse.morphTargetDictionary} morphTargetInfluences={nodes.Circle_Sparse.morphTargetInfluences} />
              <group name="Classic_short">
                <skinnedMesh name="Classic_short001" geometry={nodes.Classic_short001.geometry} material={materials['Hair_Transparency.001_B101']} skeleton={nodes.Classic_short001.skeleton} morphTargetDictionary={nodes.Classic_short001.morphTargetDictionary} morphTargetInfluences={nodes.Classic_short001.morphTargetInfluences} />
                <skinnedMesh name="Classic_short001_1" geometry={nodes.Classic_short001_1.geometry} material={materials['Scalp_Transparency.001_B102']} skeleton={nodes.Classic_short001_1.skeleton} morphTargetDictionary={nodes.Classic_short001_1.morphTargetDictionary} morphTargetInfluences={nodes.Classic_short001_1.morphTargetInfluences} />
              </group>
              <group name="Male_Brow_2">
                <skinnedMesh name="Male_Brow_2001" geometry={nodes.Male_Brow_2001.geometry} material={materials['Male_Brow_Transparency.001_B114']} skeleton={nodes.Male_Brow_2001.skeleton} morphTargetDictionary={nodes.Male_Brow_2001.morphTargetDictionary} morphTargetInfluences={nodes.Male_Brow_2001.morphTargetInfluences} />
                <skinnedMesh name="Male_Brow_2001_1" geometry={nodes.Male_Brow_2001_1.geometry} material={materials['Male_Brow_Base_Transparency.001_B115']} skeleton={nodes.Male_Brow_2001_1.skeleton} morphTargetDictionary={nodes.Male_Brow_2001_1.morphTargetDictionary} morphTargetInfluences={nodes.Male_Brow_2001_1.morphTargetInfluences} />
              </group>
              <skinnedMesh name="Mustache_Sparse" geometry={nodes.Mustache_Sparse.geometry} material={materials['Beard_Transparency.006_B109']} skeleton={nodes.Mustache_Sparse.skeleton} morphTargetDictionary={nodes.Mustache_Sparse.morphTargetDictionary} morphTargetInfluences={nodes.Mustache_Sparse.morphTargetInfluences} />
              <skinnedMesh name="Sideburns_Stubble" geometry={nodes.Sideburns_Stubble.geometry} material={materials['Beard_Transparency.004_B110']} skeleton={nodes.Sideburns_Stubble.skeleton} morphTargetDictionary={nodes.Sideburns_Stubble.morphTargetDictionary} morphTargetInfluences={nodes.Sideburns_Stubble.morphTargetInfluences} />
              <skinnedMesh name="Soul_Patch_Sparse" geometry={nodes.Soul_Patch_Sparse.geometry} material={materials['Beard_Transparency.007_B111']} skeleton={nodes.Soul_Patch_Sparse.skeleton} morphTargetDictionary={nodes.Soul_Patch_Sparse.morphTargetDictionary} morphTargetInfluences={nodes.Soul_Patch_Sparse.morphTargetInfluences} />
            </group>
          </group>
        </group>
      )
    }
    

export default CC4Test;
