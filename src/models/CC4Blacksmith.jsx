/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 BlacksmithTest.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, Html, useAnimations} from "@react-three/drei";
import { folder, button, useControls } from "leva";
import * as THREE from "three";
import useVisemeAnimationCC4 from "../hooks/useVisemeAnimationCC4";
import useCharacterAnimationCC4 from "../hooks/useCharacterAnimationCC4";

export function Smith(props, { onReady }) {
  const {nodes, materials, scene } = useGLTF('models/CC4BlacksmithAnimations.glb')
  const group = useRef();

  useEffect(() => {
        if ({nodes, materials, scene } && onReady) {
          onReady(); // Notify parent that model is ready
        }
      }, [{nodes, materials, scene }, onReady]);

  useEffect(() => {
    scene.traverse((obj) => {
      if (obj.isSkinnedMesh) {
        const hasGeometry = obj.geometry && obj.geometry.attributes?.position;

        if (!hasGeometry) {
          console.warn('Disabling broken SkinnedMesh:', obj.name);
          obj.visible = false; // Hide broken mesh
        }
      }
    });
  }, [scene]);


  // These variables are required for the animation to function but may be made redundant in the future
    //const group = useRef();
    
    let setupMode = false;
    const [facialExpression, setFacialExpression] = useState("");


  // Possible facial expressions are set per model to accomodate for available visemes
  const facialExpressions = {
    default: {},
    test: {
      viseme_CH: 0.75,
      viseme_SS: 0.79,
      eyeSquintLeft: 1,
      eyeSquintRight: 1,
      eyeWideRight: 1
    },
  };


  // Map viseme symbols to corresponding morph target names as these may differ per model
  // Includes weight values for each corresponding morph target
  const visemeMap = {
    // Silence
    "-": [{ target: "Silence", weight: 1 }],

    "a": [
      { target: "Mouth_Smile_L", weight: 0.23 },
      { target: "Mouth_Smile_R", weight: 0.23 },
      { target: "Jaw_Forward", weight: 0.37 },
      { target: "Jaw_Open", weight: 0.31 },
    ],

    /*
      { target: "Mouth_Drop_Lower", weight: 0.2 },
      { target: "Mouth_Frown_L", weight: 0.2 },
      { target: "Mouth_Frown_R", weight: 0.2 },
      { target: "V_Tongue_Out", weight: -0.4 },
      { target: "TongueRotation", weight: 0.12 },
      { target: "Jaw_Open", weight: 0.2 },
    */

    "o": [
      { target: "V_Tight_O", weight: 0.68 },

    ],

    /*
      { target: "Mouth_Shrug_Upper", weight: 0.3 },
      { target: "Mouth_Drop_Lower", weight: 0.2 },
      { target: "Mouth_Down", weight: 0.3 },
      { target: "Mouth_Pull_Lower_L", weight: 1 },
      { target: "Mouth_Pull_Lower_R", weight: 1 },
      { target: "Mouth_Pull_Upper_L", weight: 1 },
      { target: "Mouth_Pull_Upper_R", weight: 1 },
      { target: "Mouth_Smile_L", weight: 0.3 },
      { target: "Mouth_Smile_R", weight: 0.3 },
      { target: "Open_Jaw", weight: 0.12 },
    */

    "e": [
      { target: "V_Lip_Open", weight: 1 },
      { target: "Mouth_Smile_L", weight: 0.25 },
      { target: "Mouth_Smile_R", weight: 0.25 },
      { target: "Mouth_Dimple_L", weight: 0.2 },
      { target: "Mouth_Dimple_R", weight: 0.2 },

    ],


    /* 
      { target: "Mouth_Shrug_Upper", weight: 0.2 },
      { target: "Mouth_Drop_Lower", weight: 0.2 },
      { target: "Mouth_Down", weight: 0.3 },
      { target: "Mouth_Pull_Lower_L", weight: 1 },
      { target: "Mouth_Pull_Lower_R", weight: 1 },
      { target: "Mouth_Pull_Upper_L", weight: 1 },
      { target: "Mouth_Pull_Upper_R", weight: 1 },
      { target: "Mouth_Smile_L", weight: 0.3 },
      { target: "Mouth_Smile_R", weight: 0.3 },
      { target: "Jaw_Open", weight: 0.09 },
    */

    "i": [
      { target: "Mouth_Smile_Sharp_R", weight: 0.45 },
      { target: "Mouth_Smile_Sharp_L", weight: 0.45 },
      { target: "Mouth_Shrug_Upper", weight: 0.38 },
      { target: "Mouth_Drop_Lower", weight: 0.25 },
      { target: "Jaw_Forward", weight: 0.25 },
      { target: "Jaw_Open", weight: 0.2 },

    ],

    /*
     { target: "Mouth_Shrug_Upper", weight: 0.2 },
      { target: "Mouth_Drop_Lower", weight: 0.21 },
      { target: "Mouth_Down", weight: 0.2 },
      { target: "Jaw_Open", weight: 0.1 },
      { target: "Mouth_Frown_L", weight: 0.15 },
      { target: "Mouth_Frown_R", weight: 0.15 },
      { target: "Mouth_Pull_Upper_L", weight: 1 },
      { target: "Mouth_Pull_Upper_R", weight: 1 },
      { target: "Mouth_Pull_Lower_L", weight: 1 },
      { target: "Mouth_Pull_Lower_R", weight: 1 },
      { target: "V_Lip_Open", weight: 0.5 },
      { target: "TongueRotation", weight: -0.2 },
      { target: "TongueUp", weight: 0.2 },
      { target: "V_Tongue_Out", weight: 0.2 }, 
    */

    "u": [
      { target: "Mouth_Funnel_Up_L", weight: 0.5 },
      { target: "Mouth_Funnel_Up_R", weight: 0.5 },
      { target: "Mouth_Funnel_Down_L", weight: 0.5 },
      { target: "Mouth_Funnel_Down_R", weight: 0.5 },
      { target: "Mouth_Roll_Out_Upper_L", weight: 0.5 },
      { target: "Mouth_Roll_Out_Upper_R", weight: 0.5 },
      { target: "Mouth_Roll_Out_Lower_L", weight: 0.5 },
      { target: "Mouth_Roll_Out_Lower_R", weight: 0.5 },
      { target: "Mouth_Pull_Upper_L", weight: 0.5 },
      { target: "Mouth_Pull_Upper_R", weight: 0.5 },
      { target: "Mouth_Pull_Lower_L", weight: 0.5 },
      { target: "Mouth_Pull_Lower_R", weight: 0.5 },
    ],

    /*
      { target: "Mouth_Shrug_Lower", weight: 0.1 },
      { target: "Mouth_Drop_Upper", weight: 0.22 },
      { target: "Mouth_Down", weight: 0.27 },
      { target: "V_Tight_O", weight: 0.8 },
      { target: "Jaw_Open", weight: 0.11 },
    */

    "r": [
      { target: "V_Affricate", weight: 0.75 },
    ],

    /*
      { target: "Mouth_Drop_Upper", weight: 0.2 },
      { target: "Mouth_Drop_Lower", weight: 0.1 },
      { target: "Mouth_Down", weight: 0.22 },
      { target: "Mouth_Blow_L", weight: 0.3 },
      { target: "Mouth_Blow_R", weight: 0.3 },
      { target: "Mouth_Pull_Lower_L", weight: 1 },
      { target: "Mouth_Pull_Lower_R", weight: 1 },
      { target: "Mouth_Roll_Out_Lower_L", weight: 0.7 },
      { target: "Mouth_Roll_Out_Lower_R", weight: 0.7 },
      { target: "V_Affricate", weight: 0.4 },
      { target: "V_Lip_Open", weight: 0.4 },
      { target: "Jaw_Open", weight: 0.05 },
      { target: "TongueUp", weight: 0.2 },
      { target: "TongueRotation", weight: -0.3 },
    */

    "s": [
      { target: "V_Wide", weight: 0.6 },
      { target: "V_Lip_Open", weight: 1 },
    ],

    /*
      { target: "V_Open", weight: 0.3 },
      { target: "Mouth_Drop_Lower", weight: 0.85 },
      { target: "Mouth_Smile_L", weight: 0.27 },
      { target: "Mouth_Smile_R", weight: 0.27 },
      { target: "Mouth_Roll_In_Upper_L", weight: 0.2 },
      { target: "Mouth_Roll_In_Upper_R", weight: 0.2 },
      { target: "V_Wide", weight: 0.3 },
      { target: "Jaw_Open", weight: 0.05 },
    */

    "n": [
      { target: "V_Lip_Open", weight: 0.8 },
      { target: "V_Tight", weight: 0.12 },
      { target: "Mouth_Drop_Lower", weight: 0.21 },
    ],

    /*
      { target: "Mouth_Drop_Lower", weight: 0.5 },
      { target: "Mouth_Down", weight: 0.22 },
      { target: "Mouth_Pull_Lower_L", weight: 1 },
      { target: "Mouth_Pull_Lower_R", weight: 1 },
      { target: "Mouth_Roll_Out_Lower_L", weight: 0.8 },
      { target: "Mouth_Roll_Out_Lower_R", weight: 0.8 },
      { target: "V_Affricate", weight: 0.7 },
      { target: "Jaw_Open", weight: 0.08 },
      { target: "TongueRotation", weight: -0.3 },
      { target: "TongueUp", weight: 0.22 },
    */

    "th": [
      { target: "Mouth_Drop_Lower", weight: 0.2 },
      { target: "Mouth_Shrug_Upper", weight: 0.25 },
      { target: "Mouth_Stretch_L", weight: 0.1 },
      { target: "Mouth_Stretch_R", weight: 0.1 },
      { target: "V_Lip_Open", weight: 0.5 },
      { target: "V_Tongue_Out", weight: 0.5 },
      { target: "Jaw_Open", weight: 0.2},
      { target: "Jaw_Forward", weight: 0.42},
      { target: "Tongue_Up", weight: 0.5 },
    ],

    /*
      { target: "Mouth_Drop_Lower", weight: 0.2 },
      { target: "Mouth_Shrug_Upper", weight: 0.25 },
      { target: "Mouth_Stretch_L", weight: 0.1 },
      { target: "Mouth_Stretch_R", weight: 0.1 },
      { target: "V_Lip_Open", weight: 0.4 },
      { target: "V_Tongue_Out", weight: 1 },
      { target: "Jaw_Open", weight: 0.12 },
      { target: "TongueUp", weight: 0.22 },
      { target: "TongueRotation", weight: -0.3 },
    */

    "f": [
      { target: "V_Dental_Lip", weight: 1 },
      { target: "Mouth_Smile_Sharp_L", weight: 0.3 },
      { target: "Mouth_Smile_Sharp_R", weight: 0.3 },
      { target: "Mouth_Pull_Lower_L", weight: .5 },
      { target: "Mouth_Pull_Lower_R", weight: .5 },
      { target: "Mouth_Drop_Lower", weight: 0.4 },
      { target: "Jaw_Forward", weight: .25 },
    ],

    /*
      { target: "V_Dental_Lip", weight: 1 },
      { target: "Mouth_Funnel_Down_L", weight: 0.2 },
      { target: "Mouth_Funnel_Down_R", weight: 0.2 },
      { target: "Mouth_Drop_Upper", weight: 0.25 },
    */

    "d": [
      { target: "Mouth_Shrug_Upper", weight: 0.35 },
      { target: "Mouth_Stretch_L", weight: 0.35 },
      { target: "Mouth_Stretch_R", weight: 0.35 },
      { target: "Mouth_Roll_Out_Lower_L", weight: 0.5 },
      { target: "Mouth_Roll_Out_Lower_R", weight: 0.5 },
      { target: "V_Lip_Open", weight: 0.5 },
      { target: "Jaw_Open", weight: 0.07 },
      { target: "Jaw_Forward", weight: 0.3 },
      { target: "TongueRotation", weight: -0.6 },
      { target: "TongueUp", weight: 0.22 },
    ],

    "k": [
      { target: "V_Wide", weight: 0.6 },
      { target: "V_Affricate", weight: 0.25 },
      { target: "V_Lip_Open", weight: 1 },

    ],

    /*
      { target: "Mouth_Drop_Lower", weight: 0.6 },
      { target: "Mouth_Shrug_Upper", weight: 0.1 },
      { target: "Jaw_Open", weight: 0.06 },
      { target: "V_Wide", weight: 0.1 },
    */

    "p": [
      { target: "V_Explosive", weight: 1 },
      { target: "Mouth_Pucker_Up_L", weight: 0.25 },
      { target: "Mouth_Pucker_Up_R", weight: 0.25 },
      { target: "Mouth_Pucker_Down_L", weight: 0.25 },
      { target: "Mouth_Pucker_Down_R", weight: 0.25 },
      { target: "Mouth_Push_Upper_L", weight: 0.25 },
      { target: "Mouth_Push_Upper_R", weight: 0.25 },
      { target: "Mouth_Push_Lower_L", weight: 0.25 },
      { target: "Mouth_Push_Lower_R", weight: 0.25 },
    ],

    /*
      { target: "V_Explosive", weight: 1 },
      { target: "Mouth_Roll_In_Upper_L", weight: 0.3 },
      { target: "Mouth_Roll_In_Upper_R", weight: 0.3 },
      { target: "Mouth_Roll_In_Lower_L", weight: 0.3 },
      { target: "Mouth_Roll_In_Lower_R", weight: 0.3 },
      { target: "Open_Jaw", weight: 0.1 },
    */


    "m": [
      { target: "V_Explosive", weight: 1 },
      { target: "Mouth_Roll_In_Upper_L", weight: 0.3 },
      { target: "Mouth_Roll_In_Upper_R", weight: 0.3 },
      { target: "Mouth_Roll_In_Lower_L", weight: 0.3 },
      { target: "Mouth_Roll_In_Lower_R", weight: 0.3 },
      { target: "Open_Jaw", weight: 0.1 },
    ],

    "ch": [
      { target: "Mouth_Drop_Lower", weight: 0.4 },
      { target: "Mouth_Down", weight: 0.22 },
      { target: "Mouth_Roll_Out_Lower_L", weight: 0.7 },
      { target: "Mouth_Roll_Out_Lower_R", weight: 0.7 },
      { target: "V_Affricate", weight: 0.7 },
      { target: "Jaw_Open", weight: 0.06 },
      { target: "TongueRotation", weight: -0.1 },
      { target: "TongueUp", weight: 0.22 },
    ],

  };


  // Get useVisemeAnimation from the imported hook
  const { lerpInfluence, lerpJawRotation } = useVisemeAnimationCC4(group, setFacialExpression, visemeMap, setupMode, nodes, group);

  // Get useCharacterAnimation from the imported hook
  const { animation, animations, setAnimation} = useCharacterAnimationCC4(
    "models/CC4BlacksmithAnimations.glb",
    group,
    scene,
    nodes, 
  );

  
  
  

  //Leva Controls for debugging
      useControls("Animations", {
        animation: {
          value: animation,
          options: animations.map((a) => a.name),
          onChange: (value) => setAnimation(value),
        },
      });
    
      const morphTargets = Object.keys(nodes).reduce((acc, nodeName) => {
        const node = nodes[nodeName];
      
        if (node.morphTargetDictionary && node.morphTargetInfluences) {
          Object.keys(node.morphTargetDictionary).forEach((key) => {
            // Use only the morph target name (without node name)
            if (!acc[key]) {
              acc[key] = {
                label: key,
                value: 0, // Default to 0
                min: 0,
                max: 1,
                onChange: (val) => {
                  // Apply the value to ALL meshes that have this morph target
                  Object.keys(nodes).forEach((meshName) => {
                    const mesh = nodes[meshName];
                    if (mesh.morphTargetDictionary && mesh.morphTargetDictionary[key] !== undefined) {
                      lerpInfluence(mesh, key, val, 0.1);
                    }
                  });
                },
              };
            }
          });
        }
      
        return acc;
      }, {});
      
      const [, set] = useControls("MorphTarget", () => morphTargets);

      const visemeControls = Object.keys(visemeMap).reduce((acc, visemeKey) => {
        acc[visemeKey] = {
          value: 0,
          min: 0,
          max: 1,
          step: 0.01,
          onChange: (val) => {
            const visemeTargets = visemeMap[visemeKey];
      
            Object.keys(nodes).forEach((meshName) => {
              const mesh = nodes[meshName];
              if (!mesh.morphTargetDictionary || !mesh.morphTargetInfluences) return;
      
              visemeTargets.forEach(({ target, weight }) => {
                const index = mesh.morphTargetDictionary[target];
                let finalRotation = null;
                let maxWeight = 0;
                if (index !== undefined) {

                  if (target === "Jaw_Open" && weight > maxWeight) {
                    const minRotation = 1.55;
                    const maxRotation = 2.0;
                    const influence = val * weight;
                    const mappedRotation = minRotation + (maxRotation - minRotation) * influence;
                  
                    finalRotation = new THREE.Euler(0, 0, mappedRotation);
                  }

                  // V_Tight_O
                  if (target == "V_Tight_O" && weight > maxWeight){
                    const minRotation = 1.55;
                    const maxRotation = 1.75;
                    const influence = val * weight;
                    const mappedRotation = minRotation + (maxRotation - minRotation) * influence;
                  
                    finalRotation = new THREE.Euler(0, 0, mappedRotation);
                  }

                  // V_Lip_Open and V_Affricate
                  if ((target == "V_Lip_Open" || target == "V_Affricate" ) && weight > maxWeight){
                    const minRotation = 1.55;
                    const maxRotation = 1.60;
                    const influence = val * weight;
                    const mappedRotation = minRotation + (maxRotation - minRotation) * influence;
                  
                    finalRotation = new THREE.Euler(0, 0, mappedRotation);
                  }

                  

                    // Apply weighted influence
                  lerpInfluence(mesh, target, val * weight, 0.1);

                  if (finalRotation) {
                    lerpJawRotation(finalRotation, 300);
                  }
                  
                }

              });
            });
          },
        };
      
        return acc;
      }, {});
      
      useControls("Visemes", () => visemeControls);

  


  return (
    <group {...props} dispose={null} ref={group}>
      <group scale={0.01}>
        <primitive object={nodes.CC_Base_BoneRoot} />
        <skinnedMesh geometry={nodes.Butcher_s_Apron_Bonus.geometry} material={materials['Apron_Full.001']} skeleton={nodes.Butcher_s_Apron_Bonus.skeleton} />
        <skinnedMesh geometry={nodes.Butcher_s_Boots_Bonus.geometry} material={materials['Boots.001']} skeleton={nodes.Butcher_s_Boots_Bonus.skeleton} />
        <skinnedMesh geometry={nodes.Butcher_s_Shirt_Bonus.geometry} material={materials['Shirt.001']} skeleton={nodes.Butcher_s_Shirt_Bonus.skeleton} />
        <skinnedMesh geometry={nodes.Butcher_s_Trousers_Bonus.geometry} material={materials['Trousers.001']} skeleton={nodes.Butcher_s_Trousers_Bonus.skeleton} />
        <skinnedMesh geometry={nodes.Hook.geometry} material={materials['Hook.001']} skeleton={nodes.Hook.skeleton} />
        <skinnedMesh geometry={nodes.Rags.geometry} material={materials['Rags.001']} skeleton={nodes.Rags.skeleton} />
        <skinnedMesh name="Butcher_s_Mustache" geometry={nodes.Butcher_s_Mustache.geometry} material={materials['Beard_Transparency.003']} skeleton={nodes.Butcher_s_Mustache.skeleton} morphTargetDictionary={nodes.Butcher_s_Mustache.morphTargetDictionary} morphTargetInfluences={nodes.Butcher_s_Mustache.morphTargetInfluences} />
        <skinnedMesh name="Butcher_s_Sideburns" geometry={nodes.Butcher_s_Sideburns.geometry} material={materials['Beard_Transparency.002']} skeleton={nodes.Butcher_s_Sideburns.skeleton} morphTargetDictionary={nodes.Butcher_s_Sideburns.morphTargetDictionary} morphTargetInfluences={nodes.Butcher_s_Sideburns.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Tongue" geometry={nodes.CC_Base_Tongue.geometry} material={materials['Std_Tongue.001']} skeleton={nodes.CC_Base_Tongue.skeleton} morphTargetDictionary={nodes.CC_Base_Tongue.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Tongue.morphTargetInfluences} />
        <skinnedMesh name="Butcher_s_Brows001" geometry={nodes.Butcher_s_Brows001.geometry} material={materials['Male_Bushy_Transparency.001']} skeleton={nodes.Butcher_s_Brows001.skeleton} morphTargetDictionary={nodes.Butcher_s_Brows001.morphTargetDictionary} morphTargetInfluences={nodes.Butcher_s_Brows001.morphTargetInfluences} />
        <skinnedMesh name="Butcher_s_Brows001_1" geometry={nodes.Butcher_s_Brows001_1.geometry} material={materials['Male_Bushy_Base_Transparency.001']} skeleton={nodes.Butcher_s_Brows001_1.skeleton} morphTargetDictionary={nodes.Butcher_s_Brows001_1.morphTargetDictionary} morphTargetInfluences={nodes.Butcher_s_Brows001_1.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Body001" geometry={nodes.CC_Base_Body001.geometry} material={materials['Std_Skin_Head.001']} skeleton={nodes.CC_Base_Body001.skeleton} morphTargetDictionary={nodes.CC_Base_Body001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body001.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Body001_1" geometry={nodes.CC_Base_Body001_1.geometry} material={materials['Std_Skin_Body.001']} skeleton={nodes.CC_Base_Body001_1.skeleton} morphTargetDictionary={nodes.CC_Base_Body001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body001_1.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Body001_2" geometry={nodes.CC_Base_Body001_2.geometry} material={materials['Std_Skin_Arm.001']} skeleton={nodes.CC_Base_Body001_2.skeleton} morphTargetDictionary={nodes.CC_Base_Body001_2.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body001_2.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Body001_3" geometry={nodes.CC_Base_Body001_3.geometry} material={materials['Std_Skin_Leg.001']} skeleton={nodes.CC_Base_Body001_3.skeleton} morphTargetDictionary={nodes.CC_Base_Body001_3.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body001_3.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Body001_4" geometry={nodes.CC_Base_Body001_4.geometry} material={materials['Std_Nails.001']} skeleton={nodes.CC_Base_Body001_4.skeleton} morphTargetDictionary={nodes.CC_Base_Body001_4.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body001_4.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Body001_5" geometry={nodes.CC_Base_Body001_5.geometry} material={materials['Std_Eyelash.001']} skeleton={nodes.CC_Base_Body001_5.skeleton} morphTargetDictionary={nodes.CC_Base_Body001_5.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Body001_5.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Eye001" geometry={nodes.CC_Base_Eye001.geometry} material={materials['Std_Eye_R.001']} skeleton={nodes.CC_Base_Eye001.skeleton} morphTargetDictionary={nodes.CC_Base_Eye001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Eye001.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Eye001_1" geometry={nodes.CC_Base_Eye001_1.geometry} material={materials['Std_Cornea_R.001']} skeleton={nodes.CC_Base_Eye001_1.skeleton} morphTargetDictionary={nodes.CC_Base_Eye001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Eye001_1.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Eye001_2" geometry={nodes.CC_Base_Eye001_2.geometry} material={materials['Std_Eye_L.001']} skeleton={nodes.CC_Base_Eye001_2.skeleton} morphTargetDictionary={nodes.CC_Base_Eye001_2.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Eye001_2.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Eye001_3" geometry={nodes.CC_Base_Eye001_3.geometry} material={materials['Std_Cornea_L.001']} skeleton={nodes.CC_Base_Eye001_3.skeleton} morphTargetDictionary={nodes.CC_Base_Eye001_3.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Eye001_3.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_EyeOcclusion001" geometry={nodes.CC_Base_EyeOcclusion001.geometry} material={materials['Std_Eye_Occlusion_R.001']} skeleton={nodes.CC_Base_EyeOcclusion001.skeleton} morphTargetDictionary={nodes.CC_Base_EyeOcclusion001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_EyeOcclusion001.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_EyeOcclusion001_1" geometry={nodes.CC_Base_EyeOcclusion001_1.geometry} material={materials['Std_Eye_Occlusion_L.001']} skeleton={nodes.CC_Base_EyeOcclusion001_1.skeleton} morphTargetDictionary={nodes.CC_Base_EyeOcclusion001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_EyeOcclusion001_1.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_TearLine001" geometry={nodes.CC_Base_TearLine001.geometry} material={materials['Std_Tearline_R.001']} skeleton={nodes.CC_Base_TearLine001.skeleton} morphTargetDictionary={nodes.CC_Base_TearLine001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_TearLine001.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_TearLine001_1" geometry={nodes.CC_Base_TearLine001_1.geometry} material={materials['Std_Tearline_L.001']} skeleton={nodes.CC_Base_TearLine001_1.skeleton} morphTargetDictionary={nodes.CC_Base_TearLine001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_TearLine001_1.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Teeth001" geometry={nodes.CC_Base_Teeth001.geometry} material={materials['Std_Upper_Teeth.001']} skeleton={nodes.CC_Base_Teeth001.skeleton} morphTargetDictionary={nodes.CC_Base_Teeth001.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Teeth001.morphTargetInfluences} />
        <skinnedMesh name="CC_Base_Teeth001_1" geometry={nodes.CC_Base_Teeth001_1.geometry} material={materials['Std_Lower_Teeth.001']} skeleton={nodes.CC_Base_Teeth001_1.skeleton} morphTargetDictionary={nodes.CC_Base_Teeth001_1.morphTargetDictionary} morphTargetInfluences={nodes.CC_Base_Teeth001_1.morphTargetInfluences} />
      </group>
    </group>
  )
}

export default Smith;
